/// MMIO address for virtio 1.2 devices
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(usize)]
pub enum VirtioMmioOffset {
    MagicValue(u64) = 0x0,
    VirtioVersion(u64) = 0x4,
    DeviceId(u64) = 0x8,
    VendorId(u64) = 0xc,
    HostFeatures(u64) = 0x10,
    HostFeaturesSel(u64) = 0x14,
    GuestFeatures(u64) = 0x20,
    GuestFeaturesSel(u64) = 0x24,
    QueueSel(u64) = 0x30,
    QueueNumMax(u64) = 0x34,
    QueueNum(u64) = 0x38,
    QueueReady(u64) = 0x44,
    QueueNotify(u64) = 0x50,
    InterruptStatus(u64) = 0x60,
    InterruptAck(u64) = 0x64,
    Status(u64) = 0x70,
    QueueDescLow(u64) = 0x80,
    QueueDescHigh(u64) = 0x84,
    QueueDriverLow(u64) = 0x90,
    QueueDriverHigh(u64) = 0x94,
    QueueDeviceLow(u64) = 0xa0,
    QueueDeviceHigh(u64) = 0xa4,
    SHMSel(u64) = 0xac,
    SHMLenLow(u64) = 0xb0,
    SHMLenHigh(u64) = 0xb4,
    SHMBaseLow(u64) = 0xb8,
    SHMBaseHigh(u64) = 0xbc,
    QueueReset(u64) = 0xc0,
    ConfigGeneration(u64) = 0x0fc,
    DeviceSpecific(u64) = 0x100,
}

impl From<VirtioMmioOffset> for u64 {
    fn from(value: VirtioMmioOffset) -> Self {
        match value {
            VirtioMmioOffset::MagicValue(value) => value,
            VirtioMmioOffset::VirtioVersion(value) => value + 0x4,
            VirtioMmioOffset::DeviceId(value) => value + 0x8,
            VirtioMmioOffset::VendorId(value) => value + 0xc,
            VirtioMmioOffset::HostFeatures(value) => value + 0x10,
            VirtioMmioOffset::HostFeaturesSel(value) => value + 0x14,
            VirtioMmioOffset::GuestFeatures(value) => value + 0x20,
            VirtioMmioOffset::GuestFeaturesSel(value) => value + 0x24,
            VirtioMmioOffset::QueueSel(value) => value + 0x30,
            VirtioMmioOffset::QueueNumMax(value) => value + 0x34,
            VirtioMmioOffset::QueueNum(value) => value + 0x38,
            VirtioMmioOffset::QueueReady(value) => value + 0x44,
            VirtioMmioOffset::QueueNotify(value) => value + 0x50,
            VirtioMmioOffset::InterruptStatus(value) => value + 0x60,
            VirtioMmioOffset::InterruptAck(value) => value + 0x64,
            VirtioMmioOffset::Status(value) => value + 0x70,
            VirtioMmioOffset::QueueDescLow(value) => value + 0x80,
            VirtioMmioOffset::QueueDescHigh(value) => value + 0x84,
            VirtioMmioOffset::QueueDriverLow(value) => value + 0x90,
            VirtioMmioOffset::QueueDriverHigh(value) => value + 0x94,
            VirtioMmioOffset::QueueDeviceLow(value) => value + 0xa0,
            VirtioMmioOffset::QueueDeviceHigh(value) => value + 0xa4,
            VirtioMmioOffset::SHMSel(value) => value + 0xac,
            VirtioMmioOffset::SHMLenLow(value) => value + 0xb0,
            VirtioMmioOffset::SHMLenHigh(value) => value + 0xb4,
            VirtioMmioOffset::SHMBaseLow(value) => value + 0xb8,
            VirtioMmioOffset::SHMBaseHigh(value) => value + 0xbc,
            VirtioMmioOffset::QueueReset(value) => value + 0xc0,
            VirtioMmioOffset::ConfigGeneration(value) => value + 0x0fc,
            VirtioMmioOffset::DeviceSpecific(value) => value + 0x100,
        }
    }
}

impl From<u64> for VirtioMmioOffset {
    fn from(value: u64) -> Self {
        match value {
            0x0..=0x3 => VirtioMmioOffset::MagicValue(value),
            0x4..=0x7 => VirtioMmioOffset::VirtioVersion(value - 0x4),
            0x8..=0xb => VirtioMmioOffset::DeviceId(value - 0x8),
            0xc..=0xf => VirtioMmioOffset::VendorId(value - 0xc),
            0x10..=0x13 => VirtioMmioOffset::HostFeatures(value - 0x10),
            0x14..=0x1f => VirtioMmioOffset::HostFeaturesSel(value - 0x14),
            0x20..=0x23 => VirtioMmioOffset::GuestFeatures(value - 0x20),
            0x24..=0x2f => VirtioMmioOffset::GuestFeaturesSel(value - 0x24),
            0x30..=0x33 => VirtioMmioOffset::QueueSel(value - 0x30),
            0x34..=0x37 => VirtioMmioOffset::QueueNumMax(value - 0x34),
            0x38..=0x43 => VirtioMmioOffset::QueueNum(value - 0x38),
            0x44..=0x4f => VirtioMmioOffset::QueueReady(value - 0x44),
            0x50..=0x5f => VirtioMmioOffset::QueueNotify(value - 0x50),
            0x60..=0x63 => VirtioMmioOffset::InterruptStatus(value - 0x60),
            0x64..=0x6f => VirtioMmioOffset::InterruptAck(value - 0x64),
            0x70..=0x7f => VirtioMmioOffset::Status(value - 0x70),
            0x80..=0x83 => VirtioMmioOffset::QueueDescLow(value - 0x80),
            0x84..=0x8f => VirtioMmioOffset::QueueDescHigh(value - 0x84),
            0x90..=0x93 => VirtioMmioOffset::QueueDriverLow(value - 0x90),
            0x94..=0x9f => VirtioMmioOffset::QueueDriverHigh(value - 0x94),
            0xa0..=0xa3 => VirtioMmioOffset::QueueDeviceLow(value - 0xa0),
            0xa4..=0xab => VirtioMmioOffset::QueueDeviceHigh(value - 0xa4),
            0xac..=0xaf => VirtioMmioOffset::SHMSel(value - 0xac),
            0xb0..=0xb3 => VirtioMmioOffset::SHMLenLow(value - 0xb0),
            0xb4..=0xb7 => VirtioMmioOffset::SHMLenHigh(value - 0xb4),
            0xb8..=0xbb => VirtioMmioOffset::SHMBaseLow(value - 0xb8),
            0xbc..=0xbf => VirtioMmioOffset::SHMBaseHigh(value - 0xbc),
            0xc0..=0xfb => VirtioMmioOffset::QueueReset(value - 0xc0),
            0xfc..=0xff => VirtioMmioOffset::ConfigGeneration(value - 0x0fc),
            _ => VirtioMmioOffset::DeviceSpecific(value - 0x100),
        }
    }
}
